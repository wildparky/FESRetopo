# FESRetopoPlugin
# Initial code generated by Softimage SDK Wizard
# Executed Thu Jun 25 23:39:26 UTC+0500 2015 by Philipp
# 
# 
# Tip: The wizard only exposes a small subset of the possible controls
# and layout that can be achieved on a Property Page.  To find out more
# please refer to the Object Model reference documentation for PPGLayout, PPG
# and CustomProperty
# 
# Tip: Don't be concerned about achieving the exact ordering of the parameters
# because they can easily be reordered in the second phase.
# Tip: To add a command to this plug-in, right-click in the 
# script editor and choose Tools > Add Command.
import win32com.client
from win32com.client import constants as c
import sys, os, os.path

sqTypes = ["Sparse grid", "sparseGrid", "Octree", "octree"]


null = None
false = 0
true = 1

def IsPropExist(obj, propName):
	props = obj.Properties
	for p in props:
		if p.Name == propName:
			return True
	return False

def GetFileFromPath(pathStr):
	fileName = os.path.basename(pathStr)
	return fileName.split(".")[0]

def XSILoadPlugin( in_reg ):
	in_reg.Author = "Angel 07"
	in_reg.Name = "FESRetopoPlugin"
	in_reg.Major = 1
	in_reg.Minor = 0

	in_reg.RegisterProperty("FESRetopo")
	in_reg.RegisterCommand("FESRetopoOpen","FESRetopoOpen")
	#RegistrationInsertionPoint - do not remove this line
	pluginLocation = in_reg.OriginPath
	if not pluginLocation in sys.path:
		sys.path.append( pluginLocation )

	in_reg.RegisterMenu(c.siMenuTbModelCreatePolygonMeshID, "FESRetopo_menu", False, False)

	return true

def XSIUnloadPlugin( in_reg ):
	strPluginName = in_reg.Name
	Application.LogMessage(str(strPluginName) + str(" has been unloaded."), c.siVerbose)
	return true

def FESRetopoOpen_Init( in_ctxt ):
	oCmd = in_ctxt.Source
	oCmd.Description = "Opens the FESRetopo window"
	oCmd.Tooltip = "Opens the FESRetopo window"
	oCmd.SetFlag(c.siSupportsKeyAssignment, False)
	oCmd.SetFlag(c.siCannotBeUsedInBatch, True)

	return true

def FESRetopo_menu_Init(in_ctxt):
	menu = in_ctxt.source
	menu.AddCommandItem("FESRetopo", "FESRetopoOpen")

def FESRetopoOpen_Execute():
	Application.LogMessage("FESRetopo_Execute called", c.siVerbose)
	# 
	# TODO: Put your command implementation here.
	# 	
	oScnRoot = Application.ActiveProject2.ActiveScene.Root
	propName = "FESRetopo"
	if IsPropExist(oScnRoot, propName):
		oProp = oScnRoot.GetPropertyFromName2("FESRetopo")
	else:
		oProp = oScnRoot.AddProperty("FESRetopo", False, "FESRetopo")

	Application.InspectObj(oProp)
	return true

# Tip: Use the "Refresh" option on the Property Page context menu to 
# reload your script changes and re-execute the DefineLayout callback.
def FESRetopo_DefineLayout( in_ctxt ):
	oLayout = in_ctxt.Source
	oLayout.Clear()
	return true

def FESRetopo_OnInit( ):
	Application.LogMessage("FESRetopo_OnInit called", c.siVerbose)
	buildUI()

def FESRetopo_OnClosed( ):
	Application.LogMessage("FESRetopo_OnClosed called", c.siVerbose)

def FESRetopo_Define( in_ctxt ):
	oProp = in_ctxt.Source
	oProp.AddParameter3("refPath", c.siString, "", "", "", False, False)
	oProp.AddParameter3("sqType", c.siString, "sparseGrid", "", "", False, False)
	oProp.AddParameter3("isCleaning", c.siBool, 0, "", "", False, False)
	oProp.AddParameter3("isHideHUD", c.siBool, 0, "", "", False, False)
	oProp.AddParameter3("relaxStrength", c.siDouble, 1.0, 0.0, 20.0, False, False)
	oProp.AddParameter3("isShowRetopoMesh", c.siBool, 1, "", "", False, False)

	oProp.AddParameter3("sMode", c.siBool, 0, "", "", False, False)
	oProp.AddParameter3("sMesh", c.siString, "", "", "", False, False)
	oProp.AddParameter3("sCamera", c.siString, "", "", "", False, False)
	oProp.AddParameter3("sMat", c.siString, "", "", "", False, False)
	oProp.AddParameter3("sWire", c.siBool, 0, "", "", False, False)
	#oProp.AddParameter3("sCulling", c.siBool, 0, "", "", False, False)
	return true

def FESRetopo_startRetopo_OnClicked():
	oProp = PPG.Inspected(0)
	pathStr = oProp.Parameters("refPath").Value
	pluginPath = Application.Plugins("FESRetopoPlugin").OriginPath
	if os.path.exists(os.path.join(pluginPath, "FESRetopo.splice")) and len(pathStr) > 0:
		name = GetFileFromPath(oProp.Parameters("refPath").Value)
		sel = Application.Selection
		mesh = None
		for s in sel:
			if s.Type == "polymsh":
				mesh = s
				break
		if mesh == None:
			mesh = Application.GetPrim("EmptyPolygonMesh", name + "_Retopo", "", "")

		Application.SelectObj(mesh, "", True)
		Application.IsolateSelected("", 1)
		Application.SetValue(mesh.FullName + ".visibility.selectability", False, "")
		oProp.Parameters("sMat").Value = mesh.Materials[0].Name
		Application.ApplyShader("$XSI_DSPRESETS\\Shaders\\Material\\Phong.Preset", "", "", "", "siLetLocalMaterialsOverlap")
		matName = str(mesh.Materials[0])
		Application.SetValue(matName + ".Phong.transparency.red", 1, "")
		Application.SetValue(matName + ".Phong.transparency.blue", 1, "")
		Application.SetValue(matName + ".Phong.transparency.green", 1, "")
		#Application.SetValue(matName + ".Lambert.diffuse.red", 1.0, "")
		#Application.SetValue(matName + ".Lambert.diffuse.green", 0.592, "")
		#Application.SetValue(matName + ".Lambert.diffuse.blue", 0.0, "")
		#Application.SetValue(matName + ".Lambert.ambient.red", 0, "")
		#Application.SetValue(matName + ".Lambert.ambient.blue", 0, "")
		#Application.SetValue(matName + ".Lambert.ambient.green", 0, "")
		Application.DeselectAll()
		#remember camera mode
		cameraProps = Application.GetViewCamera(-1).Properties("Camera Display")
		oProp.Parameters("sMesh").Value = mesh.FullName
		oProp.Parameters("sCamera").Value = cameraProps.viewportmodename.Value
		Application.SetDisplayMode(Application.GetViewCamera(-1), "shaded")
		oProp.Parameters("sWire").Value = cameraProps.Parameters("wireontopunsel").Value
		#oProp.Parameters("sCulling").Value = cameraProps.Parameters("culbackface").Value
		cameraProps.Parameters("wireontopunsel").Value = False
		#cameraProps.Parameters("culbackface").Value = True

		sqNum = 0
		if oProp.Parameters("sqType").Value == "sparseGrid":
			sqNum = 0
		elif oProp.Parameters("sqType").Value == "octree":
			sqNum = 1
		else:
			sqNum = 1

		#apply splice operator
		p = os.path.normpath(os.path.join(Application.Plugins("FESRetopoPlugin").OriginPath, "FESRetopo.splice"))
		Application.fabricSplice("loadSplice", "{\"fileName\":\"" + p.replace('\\', '/') + "\", \"hideUI\": true,\"mesh0\":\"" + mesh.FullName + ".polymsh\"}", "", "")
		Application.SetValue(mesh.FullName + ".polymsh.SpliceOp.pathToIcons",  os.path.join(Application.Plugins("FESRetopoPlugin").OriginPath, "icons"), "")
		Application.SetValue(mesh.FullName + ".polymsh.SpliceOp.spatialQueryType",  sqNum, "")
		Application.SetValue(mesh.FullName + ".polymsh.SpliceOp.filePath",  oProp.Parameters("refPath").Value, "")
		Application.SetValue(mesh.FullName + ".polymsh.SpliceOp.isCleaning",  oProp.Parameters("isCleaning").Value, "")
		Application.SetValue(mesh.FullName + ".polymsh.SpliceOp.isClearManipulator",  oProp.Parameters("isHideHUD").Value, "")
		
		#Application.SetValue(mesh.FullName + ".visibility.viewvis", False, "")


		oProp.Parameters("sMode").Value = True
		buildUI()
	else:
		Application.LogMessage("Select a reference")

def FESRetopo_stopRetopo_OnClicked():
	oProp = PPG.Inspected(0)

	Application.SetDisplayMode(Application.GetViewCamera(-1), oProp.Parameters("sCamera").Value)
	Application.GetViewCamera(-1).Properties("Camera Display").Parameters("wireontopunsel").Value = oProp.Parameters("sWire").Value
	#Application.GetViewCamera(-1).Properties("Camera Display").Parameters("culbackface").Value = oProp.Parameters("sCulling").Value
	Application.IsolateAll("", 1)
	mesh = Application.Dictionary.GetObject(oProp.Parameters("sMesh").Value, False)
	if mesh:
		Application.ActivateObjectSelTool("")
		Application.SetValue(mesh.FullName + ".visibility.selectability", True, "")
		Application.FreezeObj(mesh, "", "")
		Application.SelectObj(mesh, "", True)
		#Application.SelectObj(mesh, "", True)
		Application.DeleteObj(mesh.Materials[0])
		Application.AssignMaterial("Sources.Materials.DefaultLib." + oProp.Parameters("sMat").Value + "," + mesh.FullName, "siLetLocalMaterialsOverlap")

	oProp.Parameters("sMode").Value = False
	oProp.Parameters("sMesh").Value = ""


	buildUI()

def buildUI():
	oProp = PPG.Inspected(0)
	oLayout = PPG.PPGLayout
	oLayout.Clear()

	oItem = oLayout.AddItem("refPath", "Reference", c.siControlFilePath)
	oItem.SetAttribute(c.siUIOpenFile, True);
	oItem.SetAttribute(c.siUIFileMustExist, False);
	filterstring = "Obj models (*.obj)|*.obj|";
	
	oItem.SetAttribute(c.siUIFileFilter, filterstring );

	oItem = oLayout.AddEnumControl("sqType", sqTypes, "Spatial query type")

	oItem = oLayout.AddItem("isShowRetopoMesh", "Show retopo mesh")
	oItem = oLayout.AddItem("isCleaning", "Hide reference")
	oItem = oLayout.AddItem("isHideHUD", "Hide HUD")
	oItem = oLayout.AddItem("relaxStrength", "Relax")

	if not oProp.Parameters("sMode").Value:
		oItem = oLayout.AddButton("startRetopo", "Start retopo")
		oItem.SetAttribute(c.siUICX, 200)
		oItem.SetAttribute(c.siUIWidthPercentage, 100)
		oItem.SetAttribute(c.siUICY, 30)
	else:
		oItem = oLayout.AddButton("stopRetopo", "Stop retopo")
		oItem.SetAttribute(c.siUICX, 200)
		oItem.SetAttribute(c.siUIWidthPercentage, 100)
		oItem.SetAttribute(c.siUICY, 30)

	PPG.Refresh()

def FESRetopo_isCleaning_OnChanged():
	oProp = PPG.Inspected(0)
	if len(oProp.Parameters("sMesh").Value) > 0:
		mesh = Application.Dictionary.GetObject(oProp.Parameters("sMesh").Value, False)
		if mesh:
			Application.SetValue(mesh.FullName + ".polymsh.SpliceOp.isCleaning",  oProp.Parameters("isCleaning").Value, "")
	return

def FESRetopo_isHideHUD_OnChanged():
	oProp = PPG.Inspected(0)
	if len(oProp.Parameters("sMesh").Value) > 0:
		mesh = Application.Dictionary.GetObject(oProp.Parameters("sMesh").Value, False)
		if mesh:
			Application.SetValue(mesh.FullName + ".polymsh.SpliceOp.isClearManipulator",  oProp.Parameters("isHideHUD").Value, "")
	
	return


def FESRetopo_relaxStrength_OnChanged():
	oProp = PPG.Inspected(0)
	if len(oProp.Parameters("sMesh").Value) > 0:
		mesh = Application.Dictionary.GetObject(oProp.Parameters("sMesh").Value, False)
		if mesh:
			Application.SetValue(mesh.FullName + ".polymsh.SpliceOp.relaxStrength",  oProp.Parameters("relaxStrength").Value, "")
	
	return

def FESRetopo_isShowRetopoMesh_OnChanged():
	oProp = PPG.Inspected(0)
	if len(oProp.Parameters("sMesh").Value) > 0:
		mesh = Application.Dictionary.GetObject(oProp.Parameters("sMesh").Value, False)
		if mesh:
			Application.SetValue(mesh.FullName + ".polymsh.SpliceOp.isShowInlineRetopoMesh",  oProp.Parameters("isShowRetopoMesh").Value, "")
	
	return


	
