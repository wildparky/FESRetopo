/*
 *  Copyright 2010-2015 Fabric Software Inc. All rights reserved.
 */

require Math;

/*
Based on OGLFlatShader
*/
object FESOGLPointsEdgesFlat: OGLInlineShader {};

/// default constructor
function FESOGLPointsEdgesFlat() {
  // Avoid calling the init method if this default constructor is being invoked 
  // during the construction of a derived object.
  if(this.type() == FESOGLPointsEdgesFlat)
    this.init(String(this.type()));
}

/// default constructor taking a name
function FESOGLPointsEdgesFlat(String name) {
  this.init(name);
}

/// initialize the shader using a name.
/// \internal
function FESOGLPointsEdgesFlat.init!(String name) {
  this.name = name;
  this.setVertexCode("
      #version 120 // We require OpenGL 2.1 for InlineDrawing, which supports GLSL 1.2

      uniform mat4 u_viewMatrix;
      uniform mat4 u_projection;
      uniform mat4 u_modelMatrix;
      uniform mat3 u_normalMatrix;
      
      attribute vec4 positions;
      attribute vec3 normals;

      varying vec3 v_normal;
      varying vec4 v_position;
      varying vec3 v_eyeVec;

      void main(){
        v_normal = u_normalMatrix * normals;
        v_position = u_modelMatrix * positions;
        vec4 v_positionInv = (u_viewMatrix * vec4(v_position.xyz, 1.0));
        gl_Position = u_projection * (u_viewMatrix * v_position);

        v_eyeVec = -v_positionInv.xyz;

        gl_PointSize = 6.0;
        float d = dot(v_normal, normalize(v_eyeVec));
        if(d < -1 * 0.1)
        {
          gl_PointSize = 0.0;
        }
      }
    ");

  this.setFragmentCode("
      #version 120 // We require OpenGL 2.1 for InlineDrawing, which supports GLSL 1.2
      
      uniform vec4 u_color;

      varying vec3 v_normal;
      varying vec4 v_position;
      varying vec3 v_eyeVec;
      
      void main()
      {
        vec4 final_color = u_color;
        float alpha;
        float c = 0.1;

        float d = dot(v_normal, normalize(v_eyeVec));
        if(d < -1 * c)
        {
          alpha = 0.0;
        }
        else if(d > c)
        {
          alpha = 1.0;
        }
        else
        {
          alpha = d / (2.0 * c) + (1.0 / 2.0);
        }

        final_color.a = alpha;
        gl_FragColor = final_color;


      }
    ");  
  this.defineUniform(InlineUniform("u_viewMatrix", Mat44()));
  this.defineUniform(InlineUniform("u_projection", Mat44()));
  this.defineUniform(InlineUniform("u_modelMatrix", Mat44()));
  this.defineUniform(InlineUniform("u_normalMatrix", Mat33()));
  this.defineUniform(InlineUniform('u_color', Color(1.0, 0.0, 0.0, 1.0)));
  this.defineAttribute('positions', "Vec3");
  this.defineAttribute('normals', "Vec3");
}

function Boolean FESOGLPointsEdgesFlat.draw!(io DrawContext context) 
{
  glDepthFunc(GL_LEQUAL);
  glEnable(GL_BLEND);
  glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
  glEnable(GL_POINT_SMOOTH);

  glEnable(GL_PROGRAM_POINT_SIZE);

  glDepthRange (0.0, 0.59981);
  Boolean result = this.parent.draw(context);
  
  
  glDisable(GL_POINT_SMOOTH);

  return result;
}